name: "build"
on: [ push, pull_request ]

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Install LLVM
        run: choco install llvm

      - name: Install Rust Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Build Windows X64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target x86_64-pc-windows-msvc

      - name: Rename Library File Name
        shell: bash
        run: |
          mkdir -p src/test/resources
          cp rust/target/x86_64-pc-windows-msvc/release/rosu_pp_jni.dll src/test/resources/rosu-windows-x64.dll
          sha256sum src/test/resources/rosu-windows-x64.dll | awk '{ print $1 }' > src/test/resources/rosu-windows-x64.dll.sha256

      - name: Upload JNI
        uses: actions/upload-artifact@v3
        with:
          name: push-build-windows
          path: src/test/resources/*

      - name: chmod -R 777 *
        run: chmod -R 777 *

      - name: Build Jar
        shell: bash
        run: ./gradlew build --scan --info


  linux-build:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0.1"

      - name: GLIBC List
        shell: bash
        run: |
          ldd --version
          strings /lib/x86_64-linux-gnu/libc.so.6 | grep GLIBC_

      - name: Install Rust X64 Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add x86_64-unknown-linux-gnu

      - name: Install Rust AARCH64 Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get update
          sudo apt-get install -y -q gcc-aarch64-linux-gnu:amd64 g++-aarch64-linux-gnu:amd64

      - name: Build Linux X64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target x86_64-unknown-linux-gnu

      - name: Build Linux AARCH64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target aarch64-unknown-linux-gnu
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Rename Library File Name
        shell: bash
        run: |
          mkdir -p src/test/resources
          cp rust/target/x86_64-unknown-linux-gnu/release/librosu_pp_jni.so src/test/resources/librosu-linux-x64.so
          sha256sum src/test/resources/librosu-linux-x64.so | awk '{ print $1 }' > src/test/resources/librosu-linux-x64.so.sha256
          cp rust/target/aarch64-unknown-linux-gnu/release/librosu_pp_jni.so src/test/resources/librosu-linux-arm64.so
          sha256sum src/test/resources/librosu-linux-arm64.so | awk '{ print $1 }' > src/test/resources/librosu-linux-arm64.so.sha256

      - name: Upload JNI
        uses: actions/upload-artifact@v3
        with:
          name: push-build-linux
          path: src/test/resources/*

      - name: chmod -R 777 *
        run: chmod -R 777 *

      - name: Build Jar
        shell: bash
        run: ./gradlew build --scan --info


  android-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0.1"

      - name: Install Rust Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add x86_64-linux-android
          rustup target add aarch64-linux-android

      - name: Install Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1.2.0
        with:
          ndk-version: r25b

      - name: Set Android NDK ToolChains Path
        shell: bash
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin >> $GITHUB_PATH
          echo "INPUT(-lunwind)" >> ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/x86_64/libgcc.a
          echo "INPUT(-lunwind)" >> ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/aarch64/libgcc.a

      - name: Build Android X64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target x86_64-linux-android
        env:
          CC_X86_64_LINUX_ANDROID: x86_64-linux-android26-clang
          CXX_X86_64_LINUX_ANDROID: x86_64-linux-android26-clang++
          CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: x86_64-linux-android26-clang

      - name: Build Android ARM64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target aarch64-linux-android
        env:
          CC_AARCH64_LINUX_ANDROID: aarch64-linux-android26-clang
          CXX_AARCH64_LINUX_ANDROID: aarch64-linux-android26-clang++
          CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: aarch64-linux-android26-clang

      - name: Rename Library File Name
        shell: bash
        run: |
          mkdir -p src/test/resources
          cp rust/target/x86_64-linux-android/release/librosu_pp_jni.so src/test/resources/librosu-android-x64.so
          sha256sum src/test/resources/librosu-android-x64.so | awk '{ print $1 }' > src/test/resources/librosu-android-x64.so.sha256
          cp rust/target/aarch64-linux-android/release/librosu_pp_jni.so src/test/resources/librosu-android-arm64.so
          sha256sum src/test/resources/librosu-android-arm64.so | awk '{ print $1 }' > src/test/resources/librosu-android-arm64.so.sha256

      - name: Upload JNI
        uses: actions/upload-artifact@v3
        with:
          name: push-build-android
          path: src/test/resources/*


  macos-build:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Install Rust Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Build MacOS ARM64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target aarch64-apple-darwin

      - name: Build MacOS X64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target x86_64-apple-darwin

      - name: Rename Library File Name
        shell: bash
        run: |
          mkdir -p src/test/resources
          cp rust/target/x86_64-apple-darwin/release/librosu_pp_jni.dylib src/test/resources/librosu-macos-x64.dylib
          shasum -a 256 src/test/resources/librosu-macos-x64.dylib | awk '{ print $1 }' > src/test/resources/librosu-macos-x64.dylib.sha256
          cp rust/target/aarch64-apple-darwin/release/librosu_pp_jni.dylib src/test/resources/librosu-macos-arm64.dylib
          shasum -a 256 src/test/resources/librosu-macos-arm64.dylib | awk '{ print $1 }' > src/test/resources/librosu-macos-arm64.dylib.sha256

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: push-build-macos
          path: src/test/resources/*

      - name: chmod -R 777 *
        run: chmod -R 777 *

      - name: Build Jar
        shell: bash
        run: ./gradlew build --scan --info


  release:
    needs: [windows-build, linux-build, android-build, macos-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download JNI
        uses: actions/download-artifact@v3
        with:
          path: ~/download/

      - name: Copy JNI
        shell: bash
        run: |
          mkdir src/main/resources
          cp ~/download/push-build-windows/* src/main/resources/
          cp ~/download/push-build-linux/* src/main/resources/
          cp ~/download/push-build-android/* src/main/resources/
          cp ~/download/push-build-macos/* src/main/resources/

      - name: chmod -R 777 *
        run: chmod -R 777 *

      - name: Sign Publication MavenCentral
        shell: bash
        run: ./gradlew signPublicationMavenCentral --scan --info
        env:
          PUBLICATION_CREDENTIALS: ${{ secrets.PUBLICATION_CREDENTIALS }}

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: push-release
          path: build/lib/*

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: build/lib/*

      - name: Build Jar
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: ./gradlew publish --scan --info
        env:
          PUBLICATION_CREDENTIALS: ${{ secrets.PUBLICATION_CREDENTIALS }}