name: "build"
on: [ push, pull_request ]

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Install LLVM
        run: choco install llvm

      - name: Install Rust Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Build Windows X64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target x86_64-pc-windows-msvc


  linux-build:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0.1"

      - name: GLIBC List
        shell: bash
        run: |
          ldd --version
          strings /lib/x86_64-linux-gnu/libc.so.6 | grep GLIBC_

      - name: Install Rust X64 Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add x86_64-unknown-linux-gnu

      - name: Install Rust AARCH64 Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get update
          sudo apt-get install -y -qq gcc-aarch64-linux-gnu:amd64 g++-aarch64-linux-gnu:amd64
#          wget http://ports.ubuntu.com/pool/main/f/fontconfig/libfontconfig1_2.13.1-2ubuntu3_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/f/fontconfig/libfontconfig1-dev_2.13.1-2ubuntu3_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/f/freetype/libfreetype6_2.10.1-2_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/f/freetype/libfreetype-dev_2.10.1-2_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/e/expat/libexpat1_2.2.9-1build1_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/e/expat/libexpat1-dev_2.2.9-1build1_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/u/util-linux/libuuid1_2.34-0.1ubuntu9_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/u/util-linux/uuid-dev_2.34-0.1ubuntu9_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/libp/libpng1.6/libpng16-16_1.6.37-2_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/libp/libpng1.6/libpng-dev_1.6.37-2_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/z/zlib/zlib1g_1.2.11.dfsg-2ubuntu1_arm64.deb
#          wget http://ports.ubuntu.com/pool/main/z/zlib/zlib1g-dev_1.2.11.dfsg-2ubuntu1_arm64.deb
#          dpkg -X libfontconfig1_*_arm64.deb temp
#          dpkg -X libfontconfig1-dev_*_arm64.deb temp
#          dpkg -X libfreetype6_*_arm64.deb temp
#          dpkg -X libfreetype-dev_*_arm64.deb temp
#          dpkg -X libexpat1_*_arm64.deb temp
#          dpkg -X libexpat1-dev_*_arm64.deb temp
#          dpkg -X libuuid1_*_arm64.deb temp
#          dpkg -X uuid-dev_*_arm64.deb temp
#          dpkg -X libpng16-16_*_arm64.deb temp
#          dpkg -X libpng-dev_*_arm64.deb temp
#          dpkg -X zlib1g_*_arm64.deb temp
#          dpkg -X zlib1g-dev_*_arm64.deb temp
#          sudo mkdir /lib/aarch64-linux-gnu/
#          sudo cp -r temp/lib/aarch64-linux-gnu/* /lib/aarch64-linux-gnu/
#          ls -l /lib/aarch64-linux-gnu
#          sudo cp -r temp/usr/lib/aarch64-linux-gnu/* /usr/lib/aarch64-linux-gnu/
#          ls -l /usr/lib/aarch64-linux-gnu

      - name: Build Linux X64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target x86_64-unknown-linux-gnu

      - name: Build Linux AARCH64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target aarch64-unknown-linux-gnu
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          

  android-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0.1"

      - name: Install Rust Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add x86_64-linux-android
          rustup target add aarch64-linux-android

      - name: Install Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1.2.0
        with:
          ndk-version: r25b

      - name: Set Android NDK ToolChains Path
        shell: bash
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin >> $GITHUB_PATH
          echo "INPUT(-lunwind)" >> ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/x86_64/libgcc.a
          echo "INPUT(-lunwind)" >> ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.6/lib/linux/aarch64/libgcc.a

      - name: Build Android X64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target x86_64-linux-android
        env:
          CC_X86_64_LINUX_ANDROID: x86_64-linux-android26-clang
          CXX_X86_64_LINUX_ANDROID: x86_64-linux-android26-clang++
          CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: x86_64-linux-android26-clang

      - name: Build Android ARM64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target aarch64-linux-android
        env:
          CC_AARCH64_LINUX_ANDROID: aarch64-linux-android26-clang
          CXX_AARCH64_LINUX_ANDROID: aarch64-linux-android26-clang++
          CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: aarch64-linux-android26-clang


  macos-build:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Install Rust Target
        shell: bash
        working-directory: rust
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Build MacOS ARM64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target aarch64-apple-darwin

      - name: Build MacOS X64
        shell: bash
        working-directory: rust
        run: |
          cargo build --package rosu-pp-jni --lib --release --target x86_64-apple-darwin

